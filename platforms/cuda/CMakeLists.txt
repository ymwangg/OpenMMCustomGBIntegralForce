#---------------------------------------------------
# OpenMM CUDA GB
#
# Creates OpenMMGBCUDA library.
#
# Unix:
#   libOpenMMGBCUDA.so
#----------------------------------------------------

# Collect up information about the version of the OpenMM library we're building
# and make it available to the code so it can be built into the binaries.

SET(OPENMMGBCUDA_LIBRARY_NAME OpenMMCharmmCUDA)
SET(SHARED_TARGET ${OPENMMGBCUDA_LIBRARY_NAME})

# collect up source files

file(GLOB SOURCE_INCLUDE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h)
file(GLOB SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)

# Set variables needed for encoding kernel sources into a C++ class

SET(CUDA_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/)
SET(CUDA_SOURCE_CLASS CudaCharmmKernelSources)
SET(CUDA_KERNELS_CPP ${CMAKE_CURRENT_BINARY_DIR}/${CUDA_SOURCE_CLASS}.cpp)
SET(CUDA_KERNELS_H ${CMAKE_CURRENT_BINARY_DIR}/${CUDA_SOURCE_CLASS}.h)

list(APPEND SOURCE_INCLUDE_FILES ${CUDA_KERNELS_H})
list(APPEND SOURCE_FILES ${CUDA_KERNELS_CPP})

# Create the library

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_BINARY_DIR} ${CUDA_TOOLKIT_INCLUDE})
LINK_DIRECTORIES("${OPENMM_PLUGIN_DIR}")

FILE(GLOB CUDA_KERNELS ${CUDA_SOURCE_DIR}/src/kernels/*.cu)
ADD_CUSTOM_COMMAND(OUTPUT ${CUDA_KERNELS_CPP} ${CUDA_KERNELS_H}
    COMMAND ${CMAKE_COMMAND}
    ARGS -DCUDA_SOURCE_DIR=${CUDA_SOURCE_DIR}
         -DCUDA_KERNELS_CPP=${CUDA_KERNELS_CPP}
         -DCUDA_KERNELS_H=${CUDA_KERNELS_H}
         -DCUDA_SOURCE_CLASS=${CUDA_SOURCE_CLASS}
         -P ${CMAKE_CURRENT_SOURCE_DIR}/EncodeCUDAFiles.cmake
    DEPENDS ${CUDA_KERNELS})
SET_SOURCE_FILES_PROPERTIES(${CUDA_KERNELS_CPP} ${CUDA_KERNELS_H} PROPERTIES
  GENERATED TRUE)

ADD_LIBRARY(${SHARED_TARGET} SHARED
  ${SOURCE_FILES} ${SOURCE_INCLUDE_FILES})

TARGET_LINK_LIBRARIES(${SHARED_TARGET}
  ${SHARED_GB_TARGET}
  ${OPENMM_CUDA_PLUGIN} ${OPENMM_LIBRARIES} 
  ${PTHREADS_LIB})

SET_TARGET_PROPERTIES(${SHARED_TARGET} PROPERTIES
  COMPILE_FLAGS "${EXTRA_COMPILE_FLAGS}")
IF (APPLE)
  SET_TARGET_PROPERTIES(${SHARED_TARGET} PROPERTIES
    LINK_FLAGS "${EXTRA_LINK_FLAGS} -F/Library/Frameworks -framework CUDA")
ELSE (APPLE)
  SET_TARGET_PROPERTIES(${SHARED_TARGET} PROPERTIES
    LINK_FLAGS "${EXTRA_LINK_FLAGS}")
ENDIF (APPLE)

if(APPLE)
  set_property(TARGET ${SHARED_TARGET} PROPERTY MACOSX_RPATH ON)
endif(APPLE)

# INSTALL(TARGETS ${SHARED_TARGET} DESTINATION lib)
INSTALL(TARGETS ${SHARED_TARGET} DESTINATION "${CMAKE_INSTALL_PREFIX}/lib/plugins")

# Ensure that links to the main CUDA library will be resolved.
IF (APPLE)
  SET(CUDA_LIBRARY lib${SHARED_TARGET}.dylib)
  #  INSTALL(CODE "EXECUTE_PROCESS(COMMAND install_name_tool -change ${CUDA_LIBRARY} @loader_path/${CUDA_LIBRARY} ${CMAKE_INSTALL_PREFIX}/lib/lib${SHARED_TARGET}.dylib)")
  INSTALL(CODE "EXECUTE_PROCESS(COMMAND install_name_tool -change ${CUDA_LIBRARY} @loader_path/${CUDA_LIBRARY} ${CMAKE_INSTALL_PREFIX}/lib/lib${SHARED_TARGET}.dylib)")
ENDIF (APPLE)
